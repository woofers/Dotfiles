
#+TITLE:	Emacs Configuration
#+AUTHOR:	Jaxson Van Doorn
#+EMAIL:	jaxson.vandoorn@gmail.com
#+OPTIONS:	num:nil

* Plug-Ins
** Load Package.el and MELPA Repository
 #+BEGIN_SRC emacs-lisp
 (require 'package)

 (when (>= emacs-major-version 24)
	 (add-to-list
		 'package-archives
		 '("melpa" . "http://melpa.milkbox.net/packages/")
		 t)
	 )
 #+END_SRC

** Disable Plug-Ins at Startup
 #+BEGIN_SRC emacs-lisp
 (setq package-enable-at-startup nil)
 #+END_SRC

** Initialize Packages
 #+BEGIN_SRC emacs-lisp
 (package-initialize)
 #+END_SRC

** Install Packages on Initial Install
 #+BEGIN_SRC emacs-lisp
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
 (eval-when-compile
   (require 'use-package))
 #+END_SRC

** Load Directories
 #+BEGIN_SRC emacs-lisp
 (defun load-all-in-directory (dir)
   "`load' all elisp libraries in directory DIR which are not already loaded."
   (interactive "D")
   (let ((libraries-loaded (mapcar #'file-name-sans-extension
                                   (delq nil (mapcar #'car load-history)))))
     (dolist (file (directory-files dir t ".+\\.elc?$"))
       (let ((library (file-name-sans-extension file)))
         (unless (member library libraries-loaded)
           (load library nil t)
           (push library libraries-loaded))))))
 #+END_SRC
** System Type
 #+BEGIN_SRC emacs-lisp
 (defmacro with-system (type &rest body)
   "Evaluate BODY if `system-type' equals TYPE."
   (declare (indent defun))
   `(when (eq system-type ',type)
      ,@body))
 #+END_SRC
** Separate Custom File
 #+BEGIN_SRC emacs-lisp
 (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
 (load custom-file 'noerror)
 #+END_SRC

** Allow File Loading
 #+BEGIN_SRC emacs-lisp
 (use-package load-dir
	 :ensure t)
 #+END_SRC

** Load Evil Packages
 #+BEGIN_SRC emacs-lisp
 (load-file "~/.emacs.d/lisp/init-evil.el")
 (require 'init-evil)
 #+END_SRC

** Load Org Packages
 #+BEGIN_SRC emacs-lisp
 (org-babel-load-file "~/.emacs.d/lisp/init-org.org")
 (require 'init-org)
 #+END_SRC

** Load Helm Packages
 #+BEGIN_SRC emacs-lisp
 (load-file "~/.emacs.d/lisp/init-helm.el")
 (require 'init-helm)
 #+END_SRC

** Load Powerline Packages
 #+BEGIN_SRC emacs-lisp
 (load-file "~/.emacs.d/lisp/init-powerline.el")
 (require 'init-powerline)
 #+END_SRC

** Load General Packages
 #+BEGIN_SRC emacs-lisp

 (use-package magit
         :ensure t)

 (use-package ranger
         :ensure t)

 (use-package auto-complete
         :ensure t)

 (use-package which-key
         :ensure t)

 (use-package git-gutter-fringe
         :ensure t)

 (use-package nlinum-relative
         :ensure t)

 (use-package highlight
         :ensure t)

 (use-package highlight-indent-guides
         :ensure t)

 (use-package pcomplete-extension
         :ensure t)

 (use-package eshell-git-prompt
         :ensure t)

 (use-package imenu-list
         :ensure t)

 (use-package gradle-mode
         :ensure t)

 (use-package markdown-mode
         :ensure t)

 (use-package web-mode
         :ensure t)

 (use-package json-mode
         :ensure t)

 (use-package haxe-mode
         :ensure t)

 (use-package haxe-imports
         :ensure t)

 (use-package wttrin
         :ensure t)

 (use-package ispell
         :ensure t)

 (use-package flyspell
         :ensure t)

 (use-package speck
         :ensure t)

 (use-package esup
         :ensure t)

#+END_SRC
** Load GNU Packages
 #+BEGIN_SRC emacs-lisp
 (with-system gnu/linux
     (use-package w3m
         :ensure t)

     (load-file "~/.emacs.d/elpa/tag/tag.el")

     (org-babel-load-file "~/.emacs.d/lisp/init-mu4e.org")
     (require 'init-mu4e)
 )
 #+END_SRC
* Settings
** Personal Info
 #+BEGIN_SRC emacs-lisp
 (setq user-full-name "Jaxson Van Doorn"
	   calendar-latitude 48.6
	   calendar-longitude -123.4
	   calendar-location-name "Victoria, BC")
 #+END_SRC

** Load Theme
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/challenger-deep")
 (load-theme 'challenger-deep t)
 #+END_SRC

** Ranger
*** Use Ranger Instead of Dired
  #+BEGIN_SRC emacs-lisp
  (ranger-override-dired-mode t)
  #+END_SRC
*** Visual Settings
  #+BEGIN_SRC emacs-lisp
  (setq ranger-parent-depth 3)
  (setq ranger-width-preview 0.5)
  #+END_SRC
*** Hide Binary Files
  #+BEGIN_SRC emacs-lisp
  (setq ranger-dont-show-binary t)
  #+END_SRC
*** Remove Ranger Buffers as Needed
  #+BEGIN_SRC emacs-lisp
  (setq ranger-cleanup-eagerly t)
  #+END_SRC

** Enable Auto Complete
 #+BEGIN_SRC emacs-lisp
 (ac-config-default)
 #+END_SRC

** Enable Which Key
 #+BEGIN_SRC emacs-lisp
 (which-key-mode)
 #+END_SRC

** Use Relative Line Numbers
 #+BEGIN_SRC emacs-lisp
 (nlinum-relative-setup-evil)
 #+END_SRC

** Show Git Changes in Right Hand Gutter
 #+BEGIN_SRC emacs-lisp
 (setq git-gutter-fr:side 'right-fringe)
 #+END_SRC

** Show Indentation as a Vertical Line
 #+BEGIN_SRC emacs-lisp
 (setq highlight-indent-guides-method 'character)
 #+END_SRC

** Wheather Settings
*** Use Victoria Airport
  #+BEGIN_SRC emacs-lisp
  (setq wttrin-default-cities '("YYJ"))
  #+END_SRC

*** Use English
  #+BEGIN_SRC emacs-lisp
  (setq wttrin-default-accept-language '("Accept-Language" . "en-US"))
  #+END_SRC

** Spellcheck
 #+BEGIN_SRC emacs-lisp
 (setq ispell-program-name "/usr/bin/ispell")

 (setq speck-engine 'Hunspell
	 speck-hunspell-program (executable-find "hunspell")
	 speck-hunspell-library-directory
	 (if (eq system-type 'windows-nt)
		 ""
		 (expand-file-name "share/hunspell/"
						 (file-name-directory
							 (directory-file-name
							 (file-name-directory speck-hunspell-program)))))
	 speck-hunspell-default-dictionary-name "en"
	 speck-hunspell-dictionary-alist '(("en" . "en_US"))
	 speck-hunspell-language-options '(("en" utf-8 nil nil))
	 speck-hunspell-coding-system 'utf-8)
 (speck-mode 1)
 #+END_SRC

* Behavior
** Startup
*** Disable Splash Screen
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
	  inhibit-startup-message t
	  inhibit-startup-echo-area-message t)
  #+END_SRC

*** Open Blank Scratch
  #+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
  #+END_SRC

*** Default Directory
  #+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
  #+END_SRC

** UI
*** Disable Menu
  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  #+END_SRC
*** Disable Toolbar
  #+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  #+END_SRC
*** Hide Scroll Bar
  #+BEGIN_SRC emacs-lisp
  (when (boundp 'scroll-bar-mode)
	  (scroll-bar-mode -1))
  #+END_SRC
*** Better Scrolling
  #+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
		scroll-conservatively 100000
		scroll-preserve-screen-position 1)
  #+END_SRC
*** Powerline Info
  #+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
  #+END_SRC
*** Abbreviated Yes or No
  #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
*** Show End of Compilation
  #+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
  #+END_SRC
*** Disables Visual and Audio "Bell"
  #+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
		ring-bell-function 'ignore)
  #+END_SRC
*** Orange Carret
  #+BEGIN_SRC emacs-lisp
  (set-cursor-color "#fdbf82")
  #+END_SRC
*** Show Wrapped Lines
  #+BEGIN_SRC emacs-lisp
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (setq-default left-fringe-width nil)
  (setq-default indicate-empty-lines t)
  (setq-default indent-tabs-mode nil)
  #+END_SRC
*** Highlight Lines Over Width Limit
  #+BEGIN_SRC emacs-lisp
  (defvar max-line-width 80 "Max width of lines")
  (setq whitespace-line-column max-line-width)
  (setq whitespace-style '(face lines-tail))
  (setq-default fill-column max-line-width)
  #+END_SRC
*** Default Split Mode is Vertical
  #+BEGIN_SRC emacs-lisp
  (setq split-width-threshold nil)
  #+END_SRC
*** Allow Custom Themes
  #+BEGIN_SRC emacs-lisp
    (setq custom-safe-themes t)
  #+END_SRC
*** Set Title Bar
  #+BEGIN_SRC emacs-lisp
  (setq frame-title-format "%b - emacs")
  #+END_SRC
*** Highlight Current Line
  #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  #+END_SRC
*** Relative Line Numbers
**** Change Update Fequency
   #+BEGIN_SRC emacs-lisp
   (setq nlinum-relative-redisplay-delay 0.018)
   #+END_SRC
**** Set Offset to Zero
   #+BEGIN_SRC emacs-lisp
   (setq nlinum-relative-offset 0)
   #+END_SRC
*** Use Same Frame With Newly Opened File
  #+BEGIN_SRC emacs-lisp
  (setq ns-pop-up-frames nil)
  #+END_SRC
*** Eshell
  #+BEGIN_SRC emacs-lisp
  (eshell-git-prompt-use-theme 'powerline)
  #+END_SRC
** Editing
*** Newline at End of File
  #+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
  #+END_SRC
*** Disable Warning for Large Files
  #+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold nil)
  #+END_SRC
*** Follow Symbolic Links
  #+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
  #+END_SRC
*** Better Auto-Save and Auto-Backup
**** Move Backup Directory
   #+BEGIN_SRC emacs-lisp
   (defvar backup-directory (concat user-emacs-directory "backups"))
   (if (not (file-exists-p backup-directory))
	   (make-directory backup-directory t))
   (setq backup-directory-alist `(("." . ,backup-directory)))
   #+END_SRC
**** Auto-Save Frequency and Other Settings
   #+BEGIN_SRC emacs-lisp
   (setq make-backup-files t			   ; Backup on Save
		 backup-by-copying t			   ; Do not Clutter Symlinks
		 version-control t				   ; Add Version Number
		 delete-old-versions t			   ; Delete Old Backup File
		 delete-by-moving-to-trash t	   ; Permanat Delete
		 kept-old-versions 3			   ; Oldest Versions
		 kept-new-versions 3			   ; Newest Versions
		 auto-save-default t			   ; Auto-Save on Buffer Switch
		 auto-save-timeout 60			   ; Number of Second Between Auto-Saves
		 auto-save-interval 200			   ; Number of Characters
										   ; Typed Between Auto-Save
   )
   #+END_SRC
*** Indentation
  #+BEGIN_SRC emacs-lisp
  (defvar tab-spaces 4 "Spaces per tab")
  (setq-default tab-width tab-spaces)
  (setq tab-width tab-spaces)
  (setq-default indent-tabs-mode nil)
  (setq tab-always-indent 'complete)

  (when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
;; (For Tabs)
;; (setq indent-line-function 'insert-tab)
;; (setq tab-stop-list (number-sequence 4 200 4))
  #+END_SRC
*** Place Only One Space at the End of a Sentance
  #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  #+END_SRC
*** Font
  #+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (set-frame-font "Meslo LG M Regular for Powerline 12" nil t)
  )
  (if (eq system-type 'gnu/linux)
      (set-frame-font "-bitstream-Meslo LG M for Powerline-normal-normal-normal-*-*-*-*-*-0-iso10646-1" nil t)
  )
  #+END_SRC
*** Clipboard
  #+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
  #+END_SRC
* Functions
** Backspace to Tab
 #+BEGIN_SRC emacs-lisp
 (defun backspace-whitespace-to-tab-stop ()
   "Delete whitespace backwards to the next tab-stop, otherwise delete one character."
   (interactive)
   (if (or indent-tabs-mode
		   (region-active-p)
		   (save-excursion
			 (> (point) (progn (back-to-indentation)
							   (point)))))
	   (call-interactively 'backward-delete-char-untabify)
	 (let ((movement (% (current-column) tab-spaces))
		   (p (point)))
	   (when (= movement 0) (setq movement tab-spaces))
	   ;; Account for edge case near beginning of buffer
	   (setq movement (min (- p 1) movement))
	   (save-match-data
		 (if (string-match "[^\t ]*\\([\t ]+\\)$" (buffer-substring-no-properties (- p movement) p))
			 (backward-delete-char (- (match-end 1) (match-beginning 1)))
		   (call-interactively 'backward-delete-char))))))
 #+END_SRC

** Untabify Whole Buffer
 #+BEGIN_SRC emacs-lisp
 (defvar untabify-this-buffer)
  (defun untabify-all()
	"Untabify the current buffer, unless `untabify-this-buffer' is nil."
	(and untabify-this-buffer (untabify (point-min) (point-max))))
  (define-minor-mode untabify-mode
	"Untabify buffer on save." nil " untab" nil
	(make-variable-buffer-local 'untabify-this-buffer)
	(setq untabify-this-buffer (not (derived-mode-p 'makefile-mode)))
 (add-hook 'before-save-hook #'untabify-all))
 (add-hook 'prog-mode-hook 'untabify-mode)
 (add-hook 'haxe-mode-hook 'untabify-mode)
 #+END_SRC

** Flyspell Uses Popup.el
 #+BEGIN_SRC emacs-lisp
 (defun flyspell-emacs-popup-textual (event poss word)
   "A textual flyspell popup menu."
   (require 'popup)
   (let* ((corrects (if flyspell-sort-corrections
						(sort (car (cdr (cdr poss))) 'string<)
					  (car (cdr (cdr poss)))))
		  (cor-menu (if (consp corrects)
						(mapcar (lambda (correct)
								  (list correct correct))
								corrects)
					  '()))
		  (affix (car (cdr (cdr (cdr poss)))))
		  show-affix-info
		  (base-menu  (let ((save (if (and (consp affix) show-affix-info)
									  (list
									   (list (concat "Save affix: " (car affix))
											 'save)
									   '("Accept (session)" session)
									   '("Accept (buffer)" buffer))
									'(("Save word" save)
									  ("Accept (session)" session)
									  ("Accept (buffer)" buffer)))))
						(if (consp cor-menu)
							(append cor-menu (cons "" save))
						  save)))
		  (menu (mapcar
				 (lambda (arg) (if (consp arg) (car arg) arg))
				 base-menu)))
	 (cadr (assoc (popup-menu* menu :scroll-bar t) base-menu))))
 #+END_SRC

** Run Bash
 #+BEGIN_SRC emacs-lisp
(defun run-bash ()
	  (interactive)
	  (let ((shell-file-name "C:\\Program Files\\Git\\bin\\bash.exe"))
	  (shell "*bash*")))
 #+END_SRC

** Vist Ansi Term
 #+BEGIN_SRC emacs-lisp
 (defun visit-term-buffer ()
   "Create or visit a terminal buffer."
   (interactive)
   (setenv "SHELL", "C:/Program Files/Git/bin/bash.exe")
   (if (not (get-buffer "*ansi-term*"))
	   (progn
		 (split-window-sensibly (selected-window))
		 (other-window 1)
		 (ansi-term (getenv "SHELL")))
	 (switch-to-buffer-other-window "*ansi-term*")))
 #+END_SRC

** Maximize Window on Windows
 #+BEGIN_SRC emacs-lisp
 (defun windows-maximize-frame()
   "Maximizes the active frame in Windows"
   (interactive)
   ;; Send a `WM_SYSCOMMAND' message to the active frame with the
   ;; `SC_MAXIMIZE' parameter.
   (when (eq system-type 'windows-nt)
	 (w32-send-sys-command 61488)))
 #+END_SRC
** Edit as Root
 #+BEGIN_SRC emacs-lisp
 (defun sudo-edit (&optional arg)
   "Edit currently visited file as root.
   With a prefix ARG prompt for a file to visit.
   Will also prompt for a file to visit if current
   buffer is not visiting a file."
   (interactive "P")
   (if (or arg (not buffer-file-name))
       (find-file (concat "/sudo:root@localhost:"
                          (ido-read-file-name "Find file(as root): ")))
     (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
 #+END_SRC
* Aliases
** Git Status
 #+BEGIN_SRC emacs-lisp
 (defun git()
   "Calls maggit-status"
   (interactive)
   (magit-status))
 #+END_SRC
** Git Diff
 #+BEGIN_SRC emacs-lisp
   (defun git-diff(rev-or-range)
     "Calls maggit-diff"
     (interactive)
     (magit-diff rev-or-range))
 #+END_SRC
** Email
 #+BEGIN_SRC emacs-lisp
 (defun email()
   "Calls mu4e"
   (interactive)
   (mu4e))
 #+END_SRC
** Wheather
 #+BEGIN_SRC emacs-lisp
 (defun wheather()
   "Calls wttrin"
   (interactive)
   (wttrin))
 #+END_SRC
** Spell Check
 #+BEGIN_SRC emacs-lisp
 (defun spell()
   "Calls speck-mode"
   (interactive)
   (with-system gnu/linux
     (flyspell-mode)
   )

   (with-system windows
     (speck-mode)
   ))

 (defun spell-check()
   "Calls speck-mode"
   (interactive)
   (spell))
 #+END_SRC
* Mappings
** Unbind Arrow Keys
 #+BEGIN_SRC emacs-lisp
 ;; (global-unset-key (kbd "<left>"))
 ;; (global-unset-key (kbd "<right>"))
 ;; (global-unset-key (kbd "<up>"))
 ;; (global-unset-key (kbd "<down>"))
 ;; (global-unset-key (kbd "<C-left>"))
 ;; (global-unset-key (kbd "<C-right>"))
 ;; (global-unset-key (kbd "<C-up>"))
 ;; (global-unset-key (kbd "<C-down>"))
 ;; (global-unset-key (kbd "<M-left>"))
 ;; (global-unset-key (kbd "<M-right>"))
 ;; (global-unset-key (kbd "<M-up>"))
 ;; (global-unset-key (kbd "<M-down>"))
 #+END_SRC

** Map Backspace Tab
 #+BEGIN_SRC emacs-lisp
 (global-set-key [backspace] 'backspace-whitespace-to-tab-stop)
 #+END_SRC

** Save Buffer
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-s") 'save-buffer)
 #+END_SRC

** Run Bash
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-c t") 'run-bash)
 #+END_SRC
* Hooks
** Delte Trailing Whitespace on Save
 #+BEGIN_SRC emacs-lisp
 (add-hook 'before-save-hook 'delete-trailing-whitespace)
 #+END_SRC

** Show Whitespace in Programing Modes
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook 'whitespace-mode)
 #+END_SRC

** Spellcheck for Newly Opened File
 #+BEGIN_SRC emacs-lisp
 ; (add-hook 'find-file-hook 'speck-mode)
 #+END_SRC

** Camel Case in Programing Modes
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook 'subword-mode)
 #+END_SRC

** Relative Line Number
 #+BEGIN_SRC emacs-lisp
 (add-hook 'find-file-hook 'nlinum-relative-mode)
 #+END_SRC

** Show Indentation
 #+BEGIN_SRC emacs-lisp
 (add-hook 'find-file-hook 'highlight-indent-guides-mode)
 #+END_SRC

** Highlight Escape Characters in Programing Modes
 #+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook '(lambda ()
	 (highlight-regexp "%[[:alpha:]]\\|\\\\[[:alpha:]]" font-lock-keyword-face
 )))
 #+END_SRC

** Show Git Changes in Gutter
 #+BEGIN_SRC emacs-lisp
 (add-hook 'find-file-hook 'git-gutter-mode)
 #+END_SRC

** Addtional Syntax Highlighting
*** Assembly Mode
 #+BEGIN_SRC emacs-lisp
 (defun asm-hook ()
   (when (string= (file-name-extension buffer-file-name) "pep")
	 (asm-mode))
 )
 (add-hook 'find-file-hook 'asm-hook)
 #+END_SRC

** Eshell Completion
 #+BEGIN_SRC emacs-lisp
 (add-hook 'eshell-mode-hook
	 (lambda ()
		 (eshell-cmpl-initialize)
		 (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
		 (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)))
 #+END_SRC
** Eshell Colors
 #+BEGIN_SRC emacs-lisp
 (progn (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
        (setq comint-output-filter-functions (remove 'ansi-color-process-output comint-output-filter-functions)))

 (progn (remove-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
        (add-to-list 'comint-output-filter-functions 'ansi-color-process-output))

 (require 'eshell)

 (add-hook 'eshell-mode-hook
           (lambda ()
             (setq xterm-color-preserve-properties t)))

 (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
 (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
 #+END_SRC
** Disable Line Highlighting Eshell
 #+BEGIN_SRC emacs-lisp
 (add-hook 'eshell-mode-hook (lambda ()
      (setq-local global-hl-line-mode
          nil)))
 (add-hook 'term-mode-hook (lambda ()
     (setq-local global-hl-line-mode
                 nil)))
 #+END_SRC
** Diminish Whitespace Mode
 #+BEGIN_SRC emacs-lisp
 (diminish 'untabify-mode)
 #+END_SRC
#+BEGIN_SRC emacs-lisp
(defun load-all-in-directory (dir)
  "`load' all elisp libraries in directory DIR which are not already loaded."
  (interactive "D")
  (let ((libraries-loaded (mapcar #'file-name-sans-extension
                                  (delq nil (mapcar #'car load-history)))))
    (dolist (file (directory-files dir t ".+\\.elc?$"))
      (let ((library (file-name-sans-extension file)))
        (unless (member library libraries-loaded)
          (load library nil t)
          (push library libraries-loaded))))))
#+END_SRC
