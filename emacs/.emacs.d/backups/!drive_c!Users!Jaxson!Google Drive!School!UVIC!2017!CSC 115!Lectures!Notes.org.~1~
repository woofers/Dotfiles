
	Sept 25, 2017

	Linked Lists
		-size = (1 + sublist)
		-tail reference
		-circular linked list
			-processes bursts

	Recursion
		-Base Case Required
		-Interchangeable for iteration
		-Divide and Conquer
		-Elegant

		int fac(int num)
		{
			if (num <= 0) return 1;
			return num * fac(num - 1);
		}

	BOX TRACE (exam)
		-Calls and Results

		public boolean isPalindrome(String value)
		{
			i
			char first = value.charAt(0);
			char last = value.charAt(vale.length - 1);
			if (last == first)
			{
				if (value.length() <= 2) return true;
				return isPalindrome(value.substring(1, vale.length - 1));
			}
			return false;
		}

	Oct 2, 2017

	Format Languages
		-Regex
		-Context Free
		-JavaID as program parameters

	Postfix and Prefix
		-Contains its own order of operations
		-Easier for computers
			-30 10 2 * + = 50
			-(55 - 13) / 6 = 6 13 55 - /
		-Converting from Infix to Postfix

	Midterm
		-String Manipulation
		-UML

	Stacks
		-Last in, First Out
		-pop() and push()

	Oct 5, 2017

	Queues
		-Reverse of Stacks
		-Application
			-Simulations
				-Event Driven
				-Time Driven

		-enquueue(item) is add(item)
		-dequeue(item) is remove(item)
		-Can be implemented with Circularly Linked List
		-"Circular" Array start = x, end = y
			Keep Empty Spot in Array
				Then start = end
			Extra Counting

		-Fixed vs Dynamic Size
		-List Implementation
		-Deque (Double Ended)
			-Add at Front and Back
			-Used in Text Edditor

	Oct 12, 2017
	Oct 16, 2017
    Oct 18, 2017

	Tree
		-Node r == root
			Partitioned into Sub Trees
		-Binary Two Subtree
		-Siblings == Same Parent
		-Height of Tree
		-Number of Nodes == 2^h-1
			Root
			Left Subtree
			Right Subtree

        | Balanced      | Complete        | Full                    |
        |---------------+-----------------+-------------------------|
        | No Height     | Always Balenced | Max Capacity for Height |
        | Difference    |                 | Always Complete         |
        | Greather Than |                 | Always Balenced         |
        | 1 Level       |                 |                         |
        
		-Binary Search Tree has Specific Order
		-Height = 1 + max(leftSubtree, rightSubtree)
    	-Root vs General Operation
		-Oilers Law
     
        | Tree Traversal         |                       |           |
        |------------------------+-----------------------+-----------|
        | Preorder               | Inorder               | Postorder |
        |------------------------+-----------------------+-----------|
        | Preseres Orignial Tree | Returns Ordered Items |           |
        |                        |                       |           |

        | Tree Implementation         |                         |
        |-----------------------------+-------------------------|
        | Array                       | Reference               |
        |-----------------------------+-------------------------|
        | Best for Complete Tree      | Implemented Recursively |
        | 2 ^ index + 1 Left Subtree  |                         |
        | 2 ^ index + 2 Right Subtree |                         |

        -No Duplication
        -Binary Search Tree extends Tree
        -Deletions Should Balance Tree
    
        Efficient
            -Space and Time Efficiency
            -O(Log2(N))
            
